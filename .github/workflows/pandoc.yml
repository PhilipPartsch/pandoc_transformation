name: Pandoc Transformation

on:
  push:
  #pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3"
          cache: 'pip' # caching pip dependencies
      - name: print versions for debugging
        run: |
          whoami
          python --version
          pip --version
          sed --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools
          python -m pip install -r ./pdf_to_odt_docx/requirements.txt
          python -m pip install -r ./sphinx-config/requirements.txt
          # python -m pip install . # install local script
      - name: transform pdf to docx / odt
        run: |
          python3 ./pdf_to_odt_docx/converter.py -in ./input -out ./intermediate
      - name: Archive intermediate folder
        uses: actions/upload-artifact@v4
        with:
          name: intermediate
          path: |
            ./intermediate/
        # Use always() to always run this step to publish test results when there are test failures
      - name: run pandoc
        uses: docker://pandoc/core:3.5
        with:
          args: >- # allows you to break string into multiple lines
            --standalone
            --columns=100
            --list-tables=true
            --extract-media ./output
            --output=./output/Automotive-SPICE-PAM-v40.rst
            ./intermediate/Automotive-SPICE-PAM-v40.pdf.word.docx
      - name: run pandoc native
        uses: docker://pandoc/core:3.5
        with:
          args: >- # allows you to break string into multiple lines
            --standalone
            --write=native
            --output=./output/Automotive-SPICE-PAM-v40.native
            ./intermediate/Automotive-SPICE-PAM-v40.pdf.word.docx
      - name: run test sed
        run: |
          seq 15 | sed '$!N;/^[2,7,9]/{s/^\([0-9]\{1,2\}\)\n.\+$/\0\n.. need:: \1\n   :id: \1\n/;p;d;};P;D'
        # '$!N;/^[4]/{s/^\([0-9]\{1,2\}\)\.\([0-9]\{1,2\}\)\.\([0-9]\{1,2\}\)\. \(.*\)\n.\+$/\0\n\n.. need:: \4\n   :id: ASPICE40_\1_\2_\3/;p;d};P;D;'
      - name: run sed
        run: |
          sed -e '$!N;/^[4]/{s/^\([0-9]\{1,2\}\)\.\([0-9]\{1,2\}\)\.\([0-9]\{1,2\}\)\. \(.*\)\n.\+$/\0\n\n.. need:: \4\n   :id: ASPICE40_\1_\2_\3/;p;d;};P;D;' ./output/Automotive-SPICE-PAM-v40.rst > ./output/Automotive-SPICE-PAM-v40.rst.sed
        # Here we have sed with a N;P;D; pattern see: https://unix.stackexchange.com/questions/216544/how-to-print-a-line-if-that-line-or-the-next-line-do-not-contain-a-particular-st/216550#216550
        #    Generic pattern:  '$!N;{<your logic>};P;D;'
        #    Specific Pattern: '$!N;/<your checks>/{s/<your extracts>/<your replacements>/;p;d;};P;D;'
        # In the replacement section, we check if we have a chapter:
        #    '/^[4]/' = check if the line starts with 4
        #    If this is the case: we extract the chapter information and only parse these, where we are 3 level deep.
        #          's/^\([0-9]\{1,2\}\)\.\([0-9]\{1,2\}\)\.\([0-9]\{1,2\}\)\.' = first till third extract groups
        #       Additionally we extract the healine of the chapter: 
        #          '\(.*\)' = fourth extract group
        #       And take the next line with us:
        #          '\n.\+$
        #     We replace what we extracted with:
        #        all information:
        #            '\0\n'
        #        and add afterwords a empty line, a need object line and a id line
        #           '\n' = empty line
        #           '.. need:: \4\n' = defintion of a need with fourth extract group (headline)
        #           '   :id: ASPICE40_\1_\2_\3' = name and first till third extract groups (chapter numbers)
        #     We close the replacment section with:
        #        '/'
        #     After the replacment section, we write everything in the pattern space to the output and clear it. 
        #        'p;d;'

      - name: Archive output folder
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            ./output/
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Setup github pages
        id: pages
        uses: actions/configure-pages@v5
      - name: copy content from output to sphinx-content folder
        run: |
          cp ./output/Automotive-SPICE-PAM-v40.rst.sed ./sphinx-content/ASPICE.rst
          mkdir -p ./sphinx-content/output
          cp -r ./output/media ./sphinx-content/output
      - name: Archive sphinx-content folder
        uses: actions/upload-artifact@v4
        with:
          name: sphinx-content
          path: |
            ./sphinx-content/
      - name: Render the documentation with the transformed rst files
        run: >
          sphinx-build
          -c ./sphinx-config
          -b html ./sphinx-content ./public
          # -vv
          # --jobs=auto
          # --show-traceback
          --keep-going
          # --fail-on-warning
      - name: Upload artifact to github pages
        uses: actions/upload-pages-artifact@v3
        with:
         path: ./public

  # github pages deployment job
  github_pages_deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: convert_via_pandoc
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
